//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputSystem/Player_Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Player_Input: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Player_Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Player_Input"",
    ""maps"": [
        {
            ""name"": ""Movement"",
            ""id"": ""dd66587c-1775-41b6-95f6-d40cc2002228"",
            ""actions"": [
                {
                    ""name"": ""move"",
                    ""type"": ""Button"",
                    ""id"": ""f59f0061-e290-4629-8118-bd0420db8726"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jump"",
                    ""type"": ""Button"",
                    ""id"": ""939ce1ed-c188-4a3c-8dc4-b8c5f147e7eb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""jumpHold"",
                    ""type"": ""Button"",
                    ""id"": ""70d3f278-3ed9-4953-b7a6-e552e6ce91c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""punch"",
                    ""type"": ""Button"",
                    ""id"": ""751b20d1-bd34-4b7b-aacd-eba339b34c62"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""kick"",
                    ""type"": ""Button"",
                    ""id"": ""522937f3-83c4-4369-aa15-09ecb404a10b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""punch_power"",
                    ""type"": ""Button"",
                    ""id"": ""67c665ed-a945-4099-b7e2-d0ff0659a693"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""kick_power"",
                    ""type"": ""Button"",
                    ""id"": ""fd3c9418-e1b7-462c-9134-3813c9d3b789"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""door"",
                    ""type"": ""Button"",
                    ""id"": ""44c1f049-0238-4221-aa16-ccc1ff9f5753"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""c4f35b20-7bc9-4bf7-8b66-20d0fad30af8"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""c3cc2eee-218f-4c9b-8d26-f0dbec5a2006"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""e7f9d5fe-47b0-461e-9e8a-8c782f5a3f4f"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""30f59cc6-98c4-4a2c-a58c-2e12349d1874"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7eacc645-7ef9-4f4c-a9aa-c92f3dadf073"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""jumpHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""57112323-eb6d-46df-894d-af671a3f1dff"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""punch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""db0d768f-9c26-48ef-8d6d-3bac4adcce41"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""kick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9de99196-bef5-43e5-8b18-c4cfc9de4bd8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""punch_power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d7c66e2f-c425-4551-855b-6683e0b4ea2e"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""kick_power"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebf699e2-aef0-494e-ac6a-831efd7cb27b"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Game"",
                    ""action"": ""door"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Game"",
            ""bindingGroup"": ""Game"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Movement
        m_Movement = asset.FindActionMap("Movement", throwIfNotFound: true);
        m_Movement_move = m_Movement.FindAction("move", throwIfNotFound: true);
        m_Movement_jump = m_Movement.FindAction("jump", throwIfNotFound: true);
        m_Movement_jumpHold = m_Movement.FindAction("jumpHold", throwIfNotFound: true);
        m_Movement_punch = m_Movement.FindAction("punch", throwIfNotFound: true);
        m_Movement_kick = m_Movement.FindAction("kick", throwIfNotFound: true);
        m_Movement_punch_power = m_Movement.FindAction("punch_power", throwIfNotFound: true);
        m_Movement_kick_power = m_Movement.FindAction("kick_power", throwIfNotFound: true);
        m_Movement_door = m_Movement.FindAction("door", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Movement
    private readonly InputActionMap m_Movement;
    private List<IMovementActions> m_MovementActionsCallbackInterfaces = new List<IMovementActions>();
    private readonly InputAction m_Movement_move;
    private readonly InputAction m_Movement_jump;
    private readonly InputAction m_Movement_jumpHold;
    private readonly InputAction m_Movement_punch;
    private readonly InputAction m_Movement_kick;
    private readonly InputAction m_Movement_punch_power;
    private readonly InputAction m_Movement_kick_power;
    private readonly InputAction m_Movement_door;
    public struct MovementActions
    {
        private @Player_Input m_Wrapper;
        public MovementActions(@Player_Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @move => m_Wrapper.m_Movement_move;
        public InputAction @jump => m_Wrapper.m_Movement_jump;
        public InputAction @jumpHold => m_Wrapper.m_Movement_jumpHold;
        public InputAction @punch => m_Wrapper.m_Movement_punch;
        public InputAction @kick => m_Wrapper.m_Movement_kick;
        public InputAction @punch_power => m_Wrapper.m_Movement_punch_power;
        public InputAction @kick_power => m_Wrapper.m_Movement_kick_power;
        public InputAction @door => m_Wrapper.m_Movement_door;
        public InputActionMap Get() { return m_Wrapper.m_Movement; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MovementActions set) { return set.Get(); }
        public void AddCallbacks(IMovementActions instance)
        {
            if (instance == null || m_Wrapper.m_MovementActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MovementActionsCallbackInterfaces.Add(instance);
            @move.started += instance.OnMove;
            @move.performed += instance.OnMove;
            @move.canceled += instance.OnMove;
            @jump.started += instance.OnJump;
            @jump.performed += instance.OnJump;
            @jump.canceled += instance.OnJump;
            @jumpHold.started += instance.OnJumpHold;
            @jumpHold.performed += instance.OnJumpHold;
            @jumpHold.canceled += instance.OnJumpHold;
            @punch.started += instance.OnPunch;
            @punch.performed += instance.OnPunch;
            @punch.canceled += instance.OnPunch;
            @kick.started += instance.OnKick;
            @kick.performed += instance.OnKick;
            @kick.canceled += instance.OnKick;
            @punch_power.started += instance.OnPunch_power;
            @punch_power.performed += instance.OnPunch_power;
            @punch_power.canceled += instance.OnPunch_power;
            @kick_power.started += instance.OnKick_power;
            @kick_power.performed += instance.OnKick_power;
            @kick_power.canceled += instance.OnKick_power;
            @door.started += instance.OnDoor;
            @door.performed += instance.OnDoor;
            @door.canceled += instance.OnDoor;
        }

        private void UnregisterCallbacks(IMovementActions instance)
        {
            @move.started -= instance.OnMove;
            @move.performed -= instance.OnMove;
            @move.canceled -= instance.OnMove;
            @jump.started -= instance.OnJump;
            @jump.performed -= instance.OnJump;
            @jump.canceled -= instance.OnJump;
            @jumpHold.started -= instance.OnJumpHold;
            @jumpHold.performed -= instance.OnJumpHold;
            @jumpHold.canceled -= instance.OnJumpHold;
            @punch.started -= instance.OnPunch;
            @punch.performed -= instance.OnPunch;
            @punch.canceled -= instance.OnPunch;
            @kick.started -= instance.OnKick;
            @kick.performed -= instance.OnKick;
            @kick.canceled -= instance.OnKick;
            @punch_power.started -= instance.OnPunch_power;
            @punch_power.performed -= instance.OnPunch_power;
            @punch_power.canceled -= instance.OnPunch_power;
            @kick_power.started -= instance.OnKick_power;
            @kick_power.performed -= instance.OnKick_power;
            @kick_power.canceled -= instance.OnKick_power;
            @door.started -= instance.OnDoor;
            @door.performed -= instance.OnDoor;
            @door.canceled -= instance.OnDoor;
        }

        public void RemoveCallbacks(IMovementActions instance)
        {
            if (m_Wrapper.m_MovementActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMovementActions instance)
        {
            foreach (var item in m_Wrapper.m_MovementActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MovementActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MovementActions @Movement => new MovementActions(this);
    private int m_GameSchemeIndex = -1;
    public InputControlScheme GameScheme
    {
        get
        {
            if (m_GameSchemeIndex == -1) m_GameSchemeIndex = asset.FindControlSchemeIndex("Game");
            return asset.controlSchemes[m_GameSchemeIndex];
        }
    }
    public interface IMovementActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnJumpHold(InputAction.CallbackContext context);
        void OnPunch(InputAction.CallbackContext context);
        void OnKick(InputAction.CallbackContext context);
        void OnPunch_power(InputAction.CallbackContext context);
        void OnKick_power(InputAction.CallbackContext context);
        void OnDoor(InputAction.CallbackContext context);
    }
}
